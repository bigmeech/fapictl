name: Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test


  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        if git tag --list | grep -q .; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s")
          fi
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## Changes
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### Using Go
          ```bash
          go install github.com/your-org/fapictl@${{ steps.get_version.outputs.version }}
          ```
          
          ### Binary Download
          Download the appropriate binary for your platform from the assets below.
          
          ### Verification
          All binaries are signed and can be verified using the provided checksums.
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${{ needs.release.outputs.version }}
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        COMMIT_HASH=$(git rev-parse --short HEAD)
        BINARY_NAME=fapictl-${GOOS}-${GOARCH}
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitHash=${COMMIT_HASH}" -o ${BINARY_NAME} .

    - name: Create archive
      run: |
        BINARY_NAME=fapictl-${{ matrix.goos }}-${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
          zip ${BINARY_NAME%.*}.zip ${BINARY_NAME} README.md
          ASSET_NAME=${BINARY_NAME%.*}.zip
        else
          tar -czf ${BINARY_NAME}.tar.gz ${BINARY_NAME} README.md
          ASSET_NAME=${BINARY_NAME}.tar.gz
        fi
        echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_ENV
        echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./${{ env.ASSET_NAME }}
        asset_name: ${{ env.ASSET_NAME }}
        asset_content_type: application/octet-stream

  checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    needs: [release, build-and-upload]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all release assets
      uses: actions/download-artifact@v3
      with:
        path: ./assets

    - name: Generate checksums
      run: |
        cd assets
        find . -name "*.tar.gz" -o -name "*.zip" | xargs sha256sum > ../checksums.txt
        cd ..

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [release, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.release.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max